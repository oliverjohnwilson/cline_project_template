name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  quality:
    name: Quality Gates (pre-commit, mypy, import contracts)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install project (editable) with dev extras
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Run pre-commit on all files
        run: |
          pre-commit run --all-files
      - name: Run mypy
        run: |
          mypy
      - name: Enforce architecture contracts (import-linter)
        run: |
          lint-imports -c importlinter.ini

  tests:
    name: Tests and Coverage
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install project (editable) with dev extras
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      - name: Run tests with coverage (XML + terminal)
        run: |
          pytest --cov=src --cov-report=xml --cov-report=term-missing
      - name: Upload coverage XML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: error

  build:
    name: Build distributions
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build sdist and wheel
        run: |
          python -m build
      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
          if-no-files-found: error

  publish:
    name: Publish to PyPI (Trusted Publishing preferred)
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
    steps:
      - name: Download dist artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist
      - name: Publish with Trusted Publishing (PyPI)
        id: pypi-publish
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
        continue-on-error: true
      - name: Fallback publish with Twine if credentials provided
        if: ${{ failure() && (secrets.TWINE_USERNAME != '' && secrets.TWINE_PASSWORD != '') }}
        run: |
          python -m pip install --upgrade pip
          pip install twine
          twine upload dist/*
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
